#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define ALPHABET_SIZE 26

// Trie node structure
struct TrieNode 
{
    struct TrieNode *children[ALPHABET_SIZE];
    int endWord;
};

// Trie structure
struct Trie 
{
    struct TrieNode *root;
};

// Creates a new trie node
struct TrieNode *createNode()
{
    struct TrieNode *node = (struct TrieNode *)malloc(sizeof(struct TrieNode));
    if (node) 
    {
        node->endWord = 0;
        for (int i = 0; i < ALPHABET_SIZE; i++) 
        {
            node->children[i] = NULL;
        }
    }
    return node;
}

// Initializes a trie structure
struct Trie *createTrie() 
{
    struct Trie *trie = (struct Trie *)malloc(sizeof(struct Trie));
    if (trie) 
    {
        trie->root = createNode();
    }
    return trie;
}

// Inserts the word into the trie structure
void insert(struct Trie *pTrie, char *word) 
{
    struct TrieNode *current = pTrie->root;
    for (int i = 0; i < strlen(word); i++) 
    {
        int index = word[i] - 'a';
        if (!current->children[index]) {
            current->children[index] = createNode();
        }
        current = current->children[index];
    }
    current->endWord = 1;
}

// Searches for the word in the trie and returns the number of occurrences
int numberOfOccurrences(struct Trie *pTrie, char *word) 
{
    struct TrieNode *current = pTrie->root;
    for (int i = 0; i < strlen(word); i++) 
    {
        int index = word[i] - 'a';
        if (!current->children[index])
        {
            return 0;
        }
        current = current->children[index];
    }
    return current->endWord; 
}

// Deallocates memory used by trie nodes
void deallocateTrieNodes(struct TrieNode *node)
{
    if (node) {
        for (int i = 0; i < ALPHABET_SIZE; i++) 
        {
            if (node->children[i]) {
                deallocateTrieNodes(node->children[i]);
            }
        }
        free(node);
    }
}

// Deallocates the trie structure
void deallocateTrie(struct Trie *pTrie) {
    if (pTrie) 
    {
        deallocateTrieNodes(pTrie->root);
        free(pTrie);
    }
}

// Reads the dictionary from file and stores words in pInWords
// Returns the number of words read
int readDictionary(char *filename, char **pInWords) 
{
    FILE *file = fopen(filename, "r");
    if (!file) 
    {
        printf("file error\n");
        exit(1);
    }
    int numWords = 0;
    char word[256];
    while (fscanf(file, "%s", word) != EOF) 
    {
        pInWords[numWords] = strdup(word);
        numWords++;
    }
    fclose(file);
    return numWords;
}

int main(void) {
    char *inWords[256];

    // Read the number of words in the dictionary
    int numWords = readDictionary("dictionary.txt", inWords);
    for (int i = 0; i < numWords; ++i) {
        printf("%s\n", inWords[i]);
    }

    struct Trie *pTrie = createTrie();
    for (int i = 0; i < numWords; i++) {
        insert(pTrie, inWords[i]);
    }

    // Test words
    char *pWords[] = {"notaword", "ucf", "no", "note", "corg"};
    for (int i = 0; i < 5; i++) {
        printf("\t%s : %d\n", pWords[i], numberOfOccurrences(pTrie, pWords[i]));
    }

    // Deallocate memory used by the trie
    deallocateTrie(pTrie);

    return 0;
}
